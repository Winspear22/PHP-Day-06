<?php

namespace App\E01Bundle\Controller;

use Exception;
use App\Entity\User;
use App\Form\UserFormType;
use Symfony\Component\Form\FormError;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Doctrine\DBAL\Exception as DoctrineDBALException;


class E01Controller extends AbstractController
{

    #[Route('/e01', name: 'e01_index')]
    public function index(): Response
    {
        try
		{
            return $this->render('e01/index.html.twig');
        }
		catch (DoctrineDBALException $e)
		{
            $this->addFlash('error', 'La base de données est indisponible.');
            return $this->render('e01/error_db.html.twig');
        }
		catch (Exception $e)
		{
            $this->addFlash('error', 'Erreur inattendue : ' . $e->getMessage());
            return $this->render('e01/error_db_others.html.twig');
        }
    }

    #[Route('/e01/sign-up', name: 'e01_sign-up')]
    public function signUp(
        Request $request,
        EntityManagerInterface $em,
        UserPasswordHasherInterface $passwordHasher
    ): Response
    {
        $user = new User();
        $form = $this->createForm(UserFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            try
            {
                // Vérifier si le username existe déjà
                $existingUser = $em->getRepository(User::class)->findOneBy(['username' => $user->getUsername()]);
                if ($existingUser)
                    $form->get('username')->addError(new FormError('Ce nom d\'utilisateur est déjà pris.'));
                else
                {
                    // Récupère le mot de passe en clair
                    $plainPassword = $form->get('plainPassword')->getData();
                    // Hash le mot de passe avant de le mettre dans l'entité
                    $hashedPassword = $passwordHasher->hashPassword($user, $plainPassword);
                    $user->setPassword($hashedPassword);

                    // Ajoute le rôle de base
                    $user->setRoles(['ROLE_USER']);

                    // Sauvegarde l'utilisateur
                    $em->persist($user);
                    $em->flush();

                    $this->addFlash('success', 'Inscription réussie ! Connecte-toi !');
                    return $this->redirectToRoute('e01_sign-in');
                }
            } 
            catch (Exception $e) 
            {
                $this->addFlash('error', 'Une erreur est survenue lors de l\'inscription. Veuillez réessayer.');
            }
        }
        return $this->render('e01/sign-up.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    #[Route('/e01/sign-out', name: 'e01_sign-out')]
    public function signOut(): void	{}

    #[Route('/e01/welcome', name: 'e01_welcome')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    public function welcome(): Response
    {
        try
        {
            return $this->render('e01/welcome.html.twig', [
            'username' => $this->getUser()->getUserIdentifier(),
            ]);
        }
        catch (Exception $e)
        {
            $this->addFlash('error', 'Une erreur est survenue lors de l\'affichage de la page de bienvenue.');
            return $this->redirectToRoute('e01_index');
        }
    }
}
<?php

namespace App\E02Bundle\Controller;

use Exception;
use App\Entity\User;
use App\Form\UserType;
use App\Repository\UserRepository;
use Symfony\Component\Form\FormError;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Doctrine\DBAL\Exception as DoctrineDBALException;

class E02Controller extends AbstractController
{
    #[Route('/e02', name: 'e02_index')]
    public function index(): Response
    {
        return $this->render('e02/index.html.twig', [
            'user' => $this->getUser()
        ]);
    }

    #[Route('/e02/create_user', name: 'e02_create_user', methods: ['POST'])]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[IsGranted('ROLE_ADMIN')]
    public function createManyUsers(EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): Response
    {
        try 
		{
			$user0 = $em->getRepository(User::class)->findOneBy(['username' => 'user0']);

			if ($user0 !== null)
			{
				$this->addFlash('error', 'Les utilisateurs sont déjà créés.');
				return $this->redirectToRoute('e02_admin');
			}
            $currentUser = $this->getUser();
			foreach ($em->getRepository(User::class)->findAll() as $user)
			{
				if ($user !== $currentUser && !in_array('ROLE_ADMIN', $user->getRoles(), true))
					$em->remove($user);
			}
            $em->flush();

            for ($i = 0; $i < 10; $i++)
			{
                $user = new User();
                $user->setUsername('user' . $i);
                $user->setPassword($passwordHasher->hashPassword($user, '123'));
                $user->setRoles(['ROLE_USER']);
                $em->persist($user);
            }
            $em->flush();

            $this->addFlash('success', '10 users créés avec succès.');
        }
		catch (Exception $e)
		{
            $this->addFlash('error', 'Erreur lors de la création des users : ' . $e->getMessage());
        }

        return $this->redirectToRoute('e02_admin');
    }

    #[Route('/e02/sign_up', name: 'e02_sign_up')]
    public function createAdmin(Request $request, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): Response
    {
        $user = new User();
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
		{
            try
			{
                if ($em->getRepository(User::class)->findOneBy(['username' => $user->getUsername()]))
                    $form->get('username')->addError(new FormError('Ce nom d\'utilisateur est déjà pris.'));
				else
				{
                    $user->setPassword($passwordHasher->hashPassword($user, $form->get('plainPassword')->getData()));
                    $user->setRoles(['ROLE_ADMIN']);
                    $em->persist($user);
                    $em->flush();
                    $this->addFlash('success', 'Inscription réussie ! Connecte-toi !');
                    return $this->redirectToRoute('e02_sign_in');
                }
            }
			catch (Exception $e)
			{
                $this->addFlash('error', 'Erreur lors de la création de l\'admin : ' . $e->getMessage());
                return $this->redirectToRoute('e02_index');
            }
        }

        return $this->render('e02/sign_up.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    #[Route('/e02/admin', name: 'e02_admin')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[IsGranted('ROLE_ADMIN')]
    public function admin(UserRepository $userRepository): Response
    {
        try
		{
            $users = $userRepository->findAll();
        }
		catch (Exception $e)
		{
            $this->addFlash('error', 'Erreur lors de l\'affichage des utilisateurs : ' . $e->getMessage());
            $users = [];
        }

        return $this->render('e02/admin.html.twig', ['users' => $users]);
    }

    #[Route('/e02/welcome', name: 'e02_welcome')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    public function welcome(): Response
    {
        try
		{
            return $this->render('e02/welcome.html.twig', [
                'user' => $this->getUser(),
            ]);
        }
		catch (Exception $e)
		{
            $this->addFlash('error', 'Une erreur est survenue lors de l\'affichage de la page de bienvenue.');
            return $this->redirectToRoute('e02_index');
        }
    }

    #[Route('/e02/sign_out', name: 'e02_sign_out')]
    public function signOut(): void {}

    #[Route('/e02/admin/delete/{id}', name: 'e02_admin_delete', methods: ['POST'])]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[IsGranted('ROLE_ADMIN')]
    public function deleteUser(int $id, UserRepository $userRepo, EntityManagerInterface $em): Response
    {
        $user = $userRepo->find($id);

        if (!$user)
            $this->addFlash('error', "L'utilisateur demandé n'existe pas.");
        else if ($user === $this->getUser())
            $this->addFlash('error', 'Tu ne peux pas te supprimer toi-même.');
        else if (in_array('ROLE_ADMIN', $user->getRoles(), true))
            $this->addFlash('error', 'Tu ne peux pas supprimer un autre administrateur.');
        else
		{
            $em->remove($user);
            $em->flush();
            $this->addFlash('success', 'Utilisateur supprimé avec succès.');
        }
        return $this->redirectToRoute('e02_admin');
    }
}
<?php

namespace App\E03Bundle\Controller;

use DateTime;
use Exception;
use Throwable;
use App\Entity\Post;
use App\Entity\User;
use App\Form\PostType;
use App\Form\UserType;
use Symfony\Component\Form\FormError;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\DBAL\Exception as DoctrineDBALException;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class E03Controller extends AbstractController
{
    #[Route('/e03', name: 'e03_index')]
    public function index(EntityManagerInterface $em): Response
    {
        try {
            $posts = $em->getRepository(Post::class)->findBy([], ['created' => 'DESC']);
            return $this->render('e03/index.html.twig', [
                'user' => $this->getUser(),
                'posts' => $posts,
            ]);
        } catch (\Throwable $e) {
            $this->addFlash('error', 'Erreur lors du chargement des posts.');
            return $this->redirectToRoute('e03_need_auth');
        }
    }

    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[Route('/e03/sign_out', name: 'e03_sign_out')]
    public function signOut(): void {}

    #[Route('/e03/sign_up', name: 'e03_sign_up')]
    public function createUser(Request $request, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): Response
    {
        $user = new User();
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                if ($em->getRepository(User::class)->findOneBy(['username' => $user->getUsername()])) {
                    $form->get('username')->addError(new FormError('Ce nom d\'utilisateur est déjà pris.'));
                } else {
                    $user->setPassword($passwordHasher->hashPassword($user, $form->get('plainPassword')->getData()));
                    $user->setRoles(['ROLE_USER']);
                    $em->persist($user);
                    $em->flush();

                    $this->addFlash('success', 'Inscription réussie ! Connecte-toi !');
                    return $this->redirectToRoute('e03_sign_in');
                }
            } catch (\Throwable $e) {
                $this->addFlash('error', 'Erreur lors de la création de l\'utilisateur.');
                return $this->redirectToRoute('e03_index');
            }
        }

        return $this->render('e03/sign_up.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    #[Route('/e03/welcome', name: 'e03_welcome')]
    #[IsGranted('ROLE_USER')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    public function welcome(EntityManagerInterface $em): Response
    {
        try
        {
            $posts = $em->getRepository(Post::class)->findBy([], ['created' => 'DESC']);
            return $this->render('e03/welcome.html.twig', [
                'user' => $this->getUser(),
                'posts' => $posts,
            ]);
        }
        catch (Throwable $e)
        {
            $this->addFlash('error', 'Une erreur est survenue lors de l\'affichage de la page de bienvenue.');
            return $this->redirectToRoute('e03_index');
        }
    }

    #[Route('/e03/post/new', name: 'e03_post_new')]
    #[IsGranted('ROLE_USER')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    public function newPost(Request $request, EntityManagerInterface $em): Response
    {
        $post = new Post();
        $form = $this->createForm(PostType::class, $post);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                $post->setAuthor($this->getUser());
                $post->setCreated(new DateTime());

                $em->persist($post);
                $em->flush();

                $this->addFlash('success', 'Post créé avec succès !');
                return $this->redirectToRoute('e03_welcome');
            } catch (\Throwable $e) {
                $this->addFlash('error', 'Erreur lors de l\'enregistrement du post.');
                return $this->redirectToRoute('e03_post_new');
            }
        }

        return $this->render('e03/post.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    #[Route('/e03/post/{id}', name: 'e03_post_show')]
    #[IsGranted('ROLE_USER')]
    public function showPost(Post $post): Response
    {
        try
        {
            return $this->render('e03/post_show.html.twig', [
                'post' => $post,
            ]);
        } 
        catch (Throwable $e)
        {
            $this->addFlash('error', 'Erreur lors de l\'affichage du post.');
            return $this->redirectToRoute('e03_welcome');
        }
    }
}<?php

namespace App\E04Bundle\Controller;

use Exception;
use Throwable;
use App\Entity\User;
use App\Form\UserFormType;
use Symfony\Component\Form\FormError;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\DBAL\Exception as DoctrineDBALException;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class E04Controller extends AbstractController
{
    #[Route('/e04', name: 'e04_index')]
    public function index(Request $request, EntityManagerInterface $em): Response
    {
        $session = $request->getSession();
        $animals = ['dog', 'cat', 'tiger', 'fox', 'owl', 'koala', 'panda', 'eagle', 'zebra', 'wolf'];
        $now = time();

        try
        {
            // Protection BDD
            //$em->getRepository(User::class)->count();

            // Gestion de session anonyme
            //dump($request->getSession()->all());

            if (!$session->has('anon_name') || !$session->has('last_access')
            || $now - $session->get('last_access') > 60)
            {
                $name = 'Anonymous ' . $animals[array_rand($animals)];
                $session->set('anon_name', $name);
                $session->set('last_access', $now);
                $elapsed = null;
            }
            else
            {
                $name = $session->get('anon_name');
                $elapsed = $now - $session->get('last_access');
                $session->set('last_access', $now);
            }
            return $this->render('e04/index.html.twig', [
                'name' => $name,
                'elapsed' => $elapsed,
            ]);
        }
        catch (DoctrineDBALException $e)
        {
            $this->addFlash('error', 'La base de données est indisponible.');
            return $this->render('e04/error_db.html.twig');
        }
        catch (Exception $e)
        {
            return $this->render('e04/error_db_others.html.twig', [
                'error_message' => 'Erreur inattendue : ' . $e->getMessage(),
                'exception_message' => $e::class,
            ]);
        }
    }

    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[Route('/e04/sign_out', name: 'e04_sign_out')]
    public function signOut(): void {}

    #[Route('/e04/sign_up', name: 'e04_sign_up')]
    public function createUser(Request $request, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): Response
    {
        $user = new User();
        $form = $this->createForm(UserFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            try
            {
                $animals = ['dog', 'cat', 'tiger', 'fox', 'owl', 'koala', 'panda', 'eagle', 'zebra', 'wolf'];
                $username = $user->getUsername();

                foreach ($animals as $animal) 
                {
                    if (strtolower($username) === strtolower("Anonymous $animal"))
                    {
                        $form->get('username')->addError(new FormError('Ce nom est réservé aux utilisateurs anonymes.'));
                        return $this->render('e04/sign_up.html.twig', [
                            'registrationForm' => $form->createView(),
                        ]);
                    }
}
                if ($em->getRepository(User::class)->findOneBy(['username' => $user->getUsername()]))
                    $form->get('username')->addError(new FormError('Ce nom d\'utilisateur est déjà pris.'));
                else
                {
                    $user->setPassword($passwordHasher->hashPassword($user, $form->get('plainPassword')->getData()));
                    $user->setRoles(['ROLE_USER']);
                    $em->persist($user);
                    $em->flush();

                    $this->addFlash('success', 'Inscription réussie ! Connecte-toi !');
                    return $this->redirectToRoute('e04_sign_in');
                }
            }
            catch (Throwable $e)
            {
                $this->addFlash('error', 'Erreur lors de la création de l\'utilisateur.');
                return $this->redirectToRoute('e04_index');
            }
        }

        return $this->render('e04/sign_up.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    #[Route('/e04/welcome', name: 'e04_welcome')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[IsGranted(attribute: 'ROLE_USER')]
    public function welcome(): Response
    {
        try
        {
            return $this->render('e04/welcome.html.twig', [
            'username' => $this->getUser()->getUserIdentifier(),
            ]);
        }
        catch (Exception $e)
        {
            $this->addFlash('error', 'Une erreur est survenue lors de l\'affichage de la page de bienvenue.');
            return $this->redirectToRoute('e04_index');
        }
    }
}<?php

namespace App\E05Bundle\Controller;

use Exception;
use Throwable;
use App\Entity\Post;
use App\Entity\User;
use App\Entity\Vote;
use App\Form\PostType;
use DateTimeImmutable;
use App\Form\UserFormType;
use Symfony\Component\Form\FormError;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\DBAL\Exception as DoctrineDBALException;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class E05Controller extends AbstractController
{
    #[Route('/e05', name: 'e05_index')]
    public function index(EntityManagerInterface $em): Response
    {
        try
		{
            return $this->render('e05/index.html.twig');
        }
		catch (DoctrineDBALException $e)
		{
            $this->addFlash('error', 'La base de données est indisponible.');
            return $this->render('e05/error_db.html.twig');
        }
		catch (Exception $e)
		{
return $this->render('e05/error_db_others.html.twig', [
    'error_message' => 'Erreur inattendue : ' . $e->getMessage(),
    'exception_message' => $e::class,
]);

        }
    }

    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[Route('/e05/sign_out', name: 'e05_sign_out')]
    public function signOut(): void {}

    #[Route('/e05/sign_up', name: 'e05_sign_up')]
    public function createUser(Request $request, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): Response
    {
        $user = new User();
        $form = $this->createForm(UserFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            try
            {
                if ($em->getRepository(User::class)->findOneBy(['username' => $user->getUsername()]))
                    $form->get('username')->addError(new FormError('Ce nom d\'utilisateur est déjà pris.'));
                else
                {
                    $user->setPassword($passwordHasher->hashPassword($user, $form->get('plainPassword')->getData()));
                    $user->setRoles(['ROLE_USER']);
                    $em->persist($user);
                    $em->flush();

                    $this->addFlash('success', 'Inscription réussie ! Connecte-toi !');
                    return $this->redirectToRoute('e05_sign_in');
                }
            }
            catch (Throwable $e)
            {
                $this->addFlash('error', 'Erreur lors de la création de l\'utilisateur.');
                return $this->redirectToRoute('e05_index');
            }
        }

        return $this->render('e05/sign_up.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    #[Route('/e05/welcome', name: 'e05_welcome')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[IsGranted(attribute: 'ROLE_USER')]
    public function welcome(EntityManagerInterface $em): Response
    {
        try
        {
            $posts = $em->getRepository(Post::class)->findBy([], ['created' => 'DESC']);
            return $this->render('e05/welcome.html.twig', [
                'user' => $this->getUser(),
                'posts' => $posts,
            ]);
        }
        catch (Throwable $e)
        {
            $this->addFlash('error', 'Une erreur est survenue lors de l\'affichage de la page de bienvenue.');
            return $this->redirectToRoute('e05_index');
        }
    }

    #[Route('/e05/post/new', name: 'e05_post_new')]
    #[IsGranted('ROLE_USER')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    public function newPost(Request $request, EntityManagerInterface $em): Response
    {
        $post = new Post();
        $form = $this->createForm(PostType::class, $post);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            try 
            {
                $post->setAuthor($this->getUser());
                $post->setCreated(new \DateTimeImmutable());

                $em->persist($post);
                $em->flush();

                $this->addFlash('success', 'Post créé avec succès !');
                return $this->redirectToRoute('e05_welcome');
            }
            catch (Throwable $e)
            {
                $this->addFlash('error', 'Erreur lors de l\'enregistrement du post.');
                return $this->redirectToRoute('e05_post_new');
            }
        }

        return $this->render('e05/post.html.twig', [
            'form' => $form->createView(),
        ]);
    }


    #[Route('/e05/post/{id}', name: 'e05_post_show')]
    #[IsGranted('ROLE_USER')]
    public function showPost(Post $post): Response
    {
        try
        {
            return $this->render('e05/post_show.html.twig', [
                'post' => $post,
            ]);
        } 
        catch (Throwable $e)
        {
            $this->addFlash('error', 'Erreur lors de l\'affichage du post.');
            return $this->redirectToRoute('e05_welcome');
        }
    }

    #[Route('/e05/post/{id}/vote/{type}', name: 'e05_post_vote', requirements: ['type' => 'like|dislike'])]
    #[IsGranted('ROLE_USER')]
    public function vote(Post $post, string $type, EntityManagerInterface $em): Response
    {
        if (!in_array($type, ['like', 'dislike'])) 
        {
            throw $this->createNotFoundException('Type de vote invalide.');
        }
        $user = $this->getUser();

        if ($post->getAuthor() === $user)
        {
            $this->addFlash('error', 'Tu ne peux pas voter pour ton propre post.');
            return $this->redirectToRoute('e05_welcome');
        }

        $existingVote = $em->getRepository(Vote::class)->findOneBy([
            'user' => $user,
            'post' => $post,
        ]);

        $isLike = $type === 'like';

        if ($existingVote)
        {
            // Même vote qu’avant → on annule
            if ($existingVote->getIsLike() === $isLike)
            {
                $em->remove($existingVote);
                $em->flush();

                $this->addFlash('info', 'Ton vote a été retiré.');
            }
            else
            {
                // Vote opposé → on change
                $existingVote->setIsLike($isLike);
                $em->flush();

                $this->addFlash('success', 'Ton vote a été mis à jour.');
            }
        } 
        else
        {
            // Aucun vote existant → on crée
            $vote = new Vote();
            $vote->setUser($user);
            $vote->setPost($post);
            $vote->setIsLike($isLike);

            $em->persist($vote);
            $em->flush();

            $this->addFlash('success', 'Ton vote a été enregistré.');
        }
        return $this->redirectToRoute('e05_welcome');
    }
}<?php

namespace App\E06Bundle\Controller;

use Exception;
use Throwable;
use App\Entity\Post;
use App\Entity\User;
use App\Form\PostType;
use App\Form\UserFormType;
use Symfony\Component\Form\FormError;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\DBAL\Exception as DoctrineDBALException;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class E06Controller extends AbstractController
{
    #[Route('/e06', name: 'e06_index')]
    public function index(EntityManagerInterface $em): Response
    {
        try
		{
            return $this->render('e06/index.html.twig');
        }
		catch (DoctrineDBALException $e)
		{
            $this->addFlash('error', 'La base de données est indisponible.');
            return $this->render('e06/error_db.html.twig');
        }
		catch (Exception $e)
		{

    return $this->render('e06/error_db_others.html.twig', [
    'error_message' => 'Erreur inattendue : ' . $e->getMessage(),
    'exception_message' => $e::class,
]);

        }
    }

    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[Route('/e06/sign_out', name: 'e06_sign_out')]
    public function signOut(): void {}

    #[Route('/e06/sign_up', name: 'e06_sign_up')]
    public function createUser(Request $request, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): Response
    {
        $user = new User();
        $form = $this->createForm(UserFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            try
            {
                if ($em->getRepository(User::class)->findOneBy(['username' => $user->getUsername()]))
                    $form->get('username')->addError(new FormError('Ce nom d\'utilisateur est déjà pris.'));
                else
                {
                    $user->setPassword($passwordHasher->hashPassword($user, $form->get('plainPassword')->getData()));
                    $user->setRoles(['ROLE_USER']);
                    $em->persist($user);
                    $em->flush();

                    $this->addFlash('success', 'Inscription réussie ! Connecte-toi !');
                    return $this->redirectToRoute('e06_sign_in');
                }
            }
            catch (Throwable $e)
            {
                $this->addFlash('error', 'Erreur lors de la création de l\'utilisateur.');
                return $this->redirectToRoute('e06_index');
            }
        }

        return $this->render('e06/sign_up.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    #[Route('/e06/welcome', name: 'e06_welcome')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[IsGranted(attribute: 'ROLE_USER')]
    public function welcome(EntityManagerInterface $em): Response
    {
        try
        {
            $posts = $em->getRepository(Post::class)->findBy([], ['created' => 'DESC']);
            return $this->render('e06/welcome.html.twig', [
                'user' => $this->getUser(),
                'posts' => $posts,
            ]);
        }
        catch (Throwable $e)
        {
            $this->addFlash('error', 'Une erreur est survenue lors de l\'affichage de la page de bienvenue.');
            return $this->redirectToRoute('e06_index');
        }
    }

    #[Route('/e06/post/new', name: 'e06_post_new')]
    #[IsGranted('ROLE_USER')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    public function newPost(Request $request, EntityManagerInterface $em): Response
    {
        $post = new Post();
        $form = $this->createForm(PostType::class, $post);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            try 
            {
                $post->setAuthor($this->getUser());
                $post->setCreated(new \DateTimeImmutable());

                $em->persist($post);
                $em->flush();

                $this->addFlash('success', 'Post créé avec succès !');
                return $this->redirectToRoute('e06_welcome');
            }
            catch (Throwable $e)
            {
                $this->addFlash('error', 'Erreur lors de l\'enregistrement du post.');
                return $this->redirectToRoute('e06_post_new');
            }
        }

        return $this->render('e06/post.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    #[Route('/e06/post/{id}', name: 'e06_post_show')]
    #[IsGranted('ROLE_USER')]
    public function showPost(Post $post): Response
    {
        try
        {
            return $this->render('e06/post_show.html.twig', [
                'post' => $post,
            ]);
        } 
        catch (Throwable $e)
        {
            $this->addFlash('error', 'Erreur lors de l\'affichage du post.');
            return $this->redirectToRoute('e06_welcome');
        }
    }

    #[Route('/e06/post/{id}/edit', name: 'e06_post_edit')]
    #[IsGranted('ROLE_USER')]
    public function edit(Post $post, Request $request, EntityManagerInterface $em): Response
    {
        // Empêcher un user de modifier un post qui ne lui appartient pas
        if ($post->getAuthor() !== $this->getUser())
        {
            throw $this->createAccessDeniedException("Tu ne peux modifier que tes propres posts.");
        }
        $form = $this->createForm(PostType::class, $post);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid())
        {
            $post->setLastEditedAt(new \DateTimeImmutable());
            $post->setLastEditedBy($this->getUser());
            $em->flush();
            $this->addFlash('success', 'Post modifié avec succès !');
            return $this->redirectToRoute('e06_post_show', ['id' => $post->getId()]);
        }
        return $this->render('e06/post_edit.html.twig', [
            'form' => $form->createView(),
            'post' => $post,
        ]);
    }
}<?php

namespace App\E07Bundle\Controller;

use Exception;
use Throwable;
use App\Entity\Post;
use App\Entity\User;
use App\Entity\Vote;
use App\Form\PostType;
use App\Form\UserFormType;
use Symfony\Component\Form\FormError;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\DBAL\Exception as DoctrineDBALException;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;

class E07Controller extends AbstractController
{
    #[Route('/e07', name: 'e07_index')]
    public function index(EntityManagerInterface $em): Response
    {
        try
		{
            return $this->render('e07/index.html.twig');
        }
		catch (DoctrineDBALException $e)
		{
            $this->addFlash('error', 'La base de données est indisponible.');
            return $this->render('e07/error_db.html.twig');
        }
		catch (Exception $e)
		{
            return $this->render('e07/error_db_others.html.twig', [
                'error_message' => 'Erreur inattendue : ' . $e->getMessage(),
                'exception_message' => $e::class,
            ]);

        }
    }

    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[Route('/e07/sign_out', name: 'e07_sign_out')]
    public function signOut(): void {}

    #[Route('/e07/sign_up', name: 'e07_sign_up')]
    public function createUser(Request $request, EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher): Response
    {
        $user = new User();
        $form = $this->createForm(UserFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            try
            {
                if ($em->getRepository(User::class)->findOneBy(['username' => $user->getUsername()]))
                {
                    $this->addFlash('error', 'Ce nom d\'utilisateur est déjà pris.');
                    return $this->redirectToRoute('e07_sign_up');
                }
                    //$form->get('username')->addError(new FormError('Ce nom d\'utilisateur est déjà pris.'));
                else
                {
                    $user->setPassword($passwordHasher->hashPassword($user, $form->get('plainPassword')->getData()));
                    $user->setRoles(['ROLE_USER']);
                    $em->persist($user);
                    $em->flush();

                    $this->addFlash('success', 'Inscription réussie ! Connecte-toi !');
                    return $this->redirectToRoute('e07_sign_in');
                }
            }
            catch (Throwable $e)
            {
                $this->addFlash('error', 'Erreur lors de la création de l\'utilisateur.');
                return $this->redirectToRoute('e07_index');
            }
        }

        return $this->render('e07/sign_up.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    #[Route('/e07/welcome', name: 'e07_welcome')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    #[IsGranted(attribute: 'ROLE_USER')]
    public function welcome(EntityManagerInterface $em): Response
    {
        try
        {
            $posts = $em->getRepository(Post::class)->findBy([], ['created' => 'DESC']);
            return $this->render('e07/welcome.html.twig', [
                'user' => $this->getUser(),
                'posts' => $posts,
            ]);
        }
        catch (Throwable $e)
        {
            $this->addFlash('error', 'Une erreur est survenue lors de l\'affichage de la page de bienvenue.');
            return $this->redirectToRoute('e07_index');
        }
    }

    #[Route('/e07/post/new', name: 'e07_post_new')]
    #[IsGranted('ROLE_USER')]
    #[IsGranted('IS_AUTHENTICATED_FULLY')]
    public function newPost(Request $request, EntityManagerInterface $em): Response
    {
        $post = new Post();
        $form = $this->createForm(PostType::class, $post);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            try 
            {
                $post->setAuthor($this->getUser());
                $post->setCreated(new \DateTimeImmutable());

                $post->setLastEditedAt(new \DateTimeImmutable());
                $post->setLastEditedBy($this->getUser());

                $em->persist($post);
                $em->flush();

                $this->addFlash('success', 'Post créé avec succès !');
                return $this->redirectToRoute('e07_welcome');
            }
            catch (Throwable $e)
            {
                $this->addFlash('error', 'Erreur lors de l\'enregistrement du post.');
                return $this->redirectToRoute('e07_post_new');
            }
        }

        return $this->render('e07/post.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    #[Route('/e07/post/{id}', name: 'e07_post_show')]
    #[IsGranted('ROLE_USER')]
    public function showPost(Post $post): Response
    {
        try
        {
            return $this->render('e07/post_show.html.twig', [
                'post' => $post,
            ]);
        } 
        catch (Throwable $e)
        {
            $this->addFlash('error', 'Erreur lors de l\'affichage du post.');
            return $this->redirectToRoute('e07_welcome');
        }
    }

    #[Route('/e07/post/{id}/vote/{type}', name: 'e07_post_vote', requirements: ['type' => 'like|dislike'])]
    #[IsGranted('ROLE_USER')]
    public function vote(Post $post, string $type, EntityManagerInterface $em): Response
    {
        if (!in_array($type, ['like', 'dislike'])) {
            throw $this->createNotFoundException('Type de vote invalide.');
        }

        /** @var User $voter */
        $voter = $this->getUser();
        /** @var User $author */
        $author = $post->getAuthor();

        if ($author === $voter)
        {
            $this->addFlash('error', 'Tu ne peux pas voter pour ton propre post.');
            return $this->redirectToRoute('e07_welcome');
        }

        $existingVote = $em->getRepository(Vote::class)->findOneBy([
            'user' => $voter,
            'post' => $post,
        ]);

        $reputation = $voter->getReputation();
        if ($type === 'like' && $reputation < 3 && !$voter->isAdmin())
        {
            $this->addFlash('error', 'Tu dois avoir au moins 3 points de réputation pour liker.');
            return $this->redirectToRoute('e07_welcome');
        }
        if ($type === 'dislike' && $reputation < 6 && !$voter->isAdmin())
        {
            $this->addFlash('error', 'Tu dois avoir au moins 6 points de réputation pour disliker.');
            return $this->redirectToRoute('e07_welcome');
        }

        $isLike = $type === 'like';

        if ($existingVote)
        {
            if ($existingVote->getIsLike() === $isLike)
            {
                // Même vote → on retire et on met à jour la réputation
                if ($isLike)
                    $author->decreaseReputation(1);
                else
                    $author->increaseReputation(1);
                $em->remove($existingVote);
                $this->addFlash('info', 'Ton vote a été retiré.');
            }
            else
            {
                // Vote opposé → on met à jour le vote et la réputation
                $existingVote->setIsLike($isLike);
                if ($isLike)
                {
                    $author->increaseReputation(1);
                    $author->decreaseReputation(1); // annule le dislike précédent
                }
                else
                {
                    $author->decreaseReputation(1);
                    $author->increaseReputation(1); // annule le like précédent
                }
                $this->addFlash('success', 'Ton vote a été mis à jour.');
            }
        }
        else
        {
            // Aucun vote existant → on crée
            $vote = new Vote();
            $vote->setUser($voter);
            $vote->setPost($post);
            $vote->setIsLike($isLike);

            if ($isLike) {
                $author->increaseReputation(1);
            } else {
                $author->decreaseReputation(1);
            }

            $em->persist($vote);
            $this->addFlash('success', 'Ton vote a été enregistré.');
        }

        $em->flush();

        return $this->redirectToRoute('e07_welcome');
    }

    #[Route('/e07/post/{id}/edit', name: 'e07_post_edit')]
    #[IsGranted('ROLE_USER')]
    public function edit(Post $post, Request $request, EntityManagerInterface $em): Response
    {
        /** @var User $user */
        $user = $this->getUser();

        // Règles d'édition
        $isOwner = $post->getAuthor() === $user;
        $hasReputation = $user->getReputation() >= 9;
        $isAdmin = $user->isAdmin();

        $isAuthorAdmin = $post->getAuthor()?->isAdmin();

        // Bloque si l’auteur du post est admin et que l’utilisateur courant ne l’est pas
        if ($isAuthorAdmin && !$isAdmin)
        {
            $this->addFlash('error', 'Seuls les administrateurs peuvent éditer les posts d\'autres administrateurs.');
            return $this->redirectToRoute('e07_welcome');
        }

        if (!$isOwner && !$hasReputation && !$isAdmin)
        {
            // Flash uniquement si c'est une restriction de réputation
            $this->addFlash('error', 'Vous n\'avez plus les 9 points de réputation requis pour éditer ce post.');
            return $this->redirectToRoute('e07_welcome');
        }

        $form = $this->createForm(PostType::class, $post);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            $post->setLastEditedAt(new \DateTimeImmutable());
            $post->setLastEditedBy($user);
            $em->flush();

            $this->addFlash('success', 'Post modifié avec succès !');
            return $this->redirectToRoute('e07_post_show', ['id' => $post->getId()]);
        }

        return $this->render('e07/post_edit.html.twig', [
            'form' => $form->createView(),
            'post' => $post,
        ]);
    }
}<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class SecurityController extends AbstractController
{
    #[Route('/login', name: 'login')]
    public function login(): Response
    {
        return $this->render('security/login.html.twig');
    }

    #[Route('/need-auth', name: 'need_auth')]
    public function needAuth(): Response
    {
        return $this->render('security/need_auth.html.twig');
    }
}